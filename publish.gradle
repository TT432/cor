apply plugin: 'maven-publish'
apply plugin: 'signing'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    failOnError false
}

java {
    withJavadocJar()
    withSourcesJar()
}

def helper = new Helper(project)

//maven仓库地址
publishing.repositories {
    maven {
        url = helper.getMavenUrl()
        helper.log "mavenUrl = ${url}"
        if (!helper.isSkipCredential(url)) {
            credentials {
                def credentials = helper.getCredentials()
                username credentials[0]
                password credentials[1]
            }
        }
    }
}

//定义发布过程
publishing.publications {
    "Javalib"(MavenPublication) {
        from components.java
        helper.appendCommonInfoToPom(it, 'jar')
    }

    if (helper.isPackLibrary()) {
        String[] paths = helper.getArtifactPath()
        helper.log "artifactPath = $paths"
        paths.each { path ->
            def file = file(path)
            def lastDotIndex = file.name.lastIndexOf('.')
            if (lastDotIndex != -1) {
                def fileName = file.name.substring(0, lastDotIndex)
                def ext = file.name.substring(lastDotIndex + 1)
                "Pack${fileName.capitalize()}lib"(MavenPublication) {
                    artifact file
                    helper.appendCommonInfoToPom(it, ext)
                }
            } else {
                helper.logError "artifactPath传入错误，必须要带扩展名：path = ${path}"
            }
        }
    }
}

//对每个输出进行签名
signing {
    sign publishing.publications
}

class Helper {
    private static def TAG = 'MavenPublishScript'

    private def signingKeyId = 'signing.keyId'
    private def signingPassword = 'signing.password'
    private def signingSecretKeyRingFile = 'signing.secretKeyRingFile'
    private def ossrhUsername = 'ossrh.username'
    private def ossrhPassword = 'ossrh.password'
    private def publishDescription = 'publish.description'
    private def publishUrl = 'publish.url'
    private def publishRepoReleaseUrl = 'publish.repoReleaseUrl'
    private def publishRepoSnapshotUrl = 'publish.repoSnapshotUrl'
    private def publishArtifactPath = 'publish.artifactPath'
    private def publishIsSkipSignature = 'publish.isSkipSignature'
    private def publishIsSkipCredential = 'publish.isSkipCredential'
    private def publishDeveloperName = 'publish.developerName'
    private def publishDeveloperEmail = 'publish.developerEmail'
    private def publishLicenseName = 'publish.licenseName'
    private def publishLicenseUrl = 'publish.licenseUrl'
    private def publishScmUrl = 'publish.scmUrl'
    private def publishScmConnection = 'publish.scmConnection'
    private def publishScmDeveloperConnection = 'publish.scmDeveloperConnection'

    private Project project

    def isCheckPass = false

    Helper(Project p) {
        this.project = p
        this.isCheckPass = check()
    }

    def isSkipCredential(url) {
        return readBoolean(publishIsSkipCredential) || project.uri(url).scheme.toLowerCase() == 'file'
    }

    def getMavenUrl() {
        String tempReleaseUrl = readProperty(publishRepoReleaseUrl)
        String tempSnapshotsUrl = readProperty(publishRepoSnapshotUrl)
        def releasesRepoUrl = !tempReleaseUrl.isEmpty() ? tempReleaseUrl : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = !tempSnapshotsUrl.isEmpty() ? tempSnapshotsUrl : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        return project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }

    def getCredentials() {
        def credentials = new String[2]
        credentials[0] = readProperty(ossrhUsername)
        credentials[1] = readProperty(ossrhPassword)
        return credentials
    }

    def getArtifactPath() {
        String path = readProperty(publishArtifactPath)
        return path.split(';')
    }

    def appendCommonInfoToPom(publication, String ext) {
        def closure = {
            pom {
                if (ext != null && !ext.isEmpty()) {
                    packaging = ext
                }
                //组件的基本信息
                name = project.archivesBaseName
                description = readProperty(publishDescription)
                url = readProperty(publishUrl)
                //licenses文件
                licenses {
                    license {
                        name = readProperty(publishLicenseName)
                        url = readProperty(publishLicenseUrl)
                    }
                }
                //开发者信息
                developers {
                    developer {
                        name = readProperty(publishDeveloperName)
                        email = readProperty(publishDeveloperEmail)
                    }
                }
                //版本控制仓库地址
                scm {
                    url = readProperty(publishScmUrl)
                    connection = readProperty(publishScmConnection)
                    developerConnection = readProperty(publishScmDeveloperConnection)
                }
            }
        }
        closure.delegate = publication
        closure.call()
    }

    def isPackLibrary() {
        return !readProperty(publishArtifactPath).isEmpty()
    }

    def log(String msg) {
        project.logger.log(LogLevel.LIFECYCLE, "${TAG}: ${msg}")
    }

    def logError(String msg) {
        project.logger.log(LogLevel.ERROR, "${TAG}: ${msg}")
    }

    def readProperty(String key) {
        return project.hasProperty(key) ? project[key] : ''
    }

    def containProperty(String key) {
        return project.properties.containsKey(key)
    }

    def readBoolean(String key) {
        return readProperty(key).toLowerCase() == 'true'
    }

    private def resolveConfigurations(Collection<Configuration> configurations, Set<Configuration> resolvedConfigurations) {
        configurations.each {
            resolvedConfigurations.add(it)
            resolveConfigurations(it.extendsFrom, resolvedConfigurations)
        }
    }

    private def loadLocalProperties() {
        File localPropsFile = project.rootProject.file('local.properties')
        if (localPropsFile.exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(localPropsFile))
            props.each { name, value ->
                project.ext[name] = value
            }
            return true
        } else {
            return false
        }
    }

    private def check() {
        log '项目是一个java工程'

        if (!loadLocalProperties()) {
            log '项目根目录下local.properties文件不存在'
        }

        if (readBoolean(publishIsSkipSignature)) {
            log '跳过签名校验'
        } else {
            if (!containProperty(signingKeyId)
                    || !containProperty(signingPassword)
                    || !containProperty(signingSecretKeyRingFile)
            ) {
                logError 'gpg的签名信息不可以为空'
                return false
            } else {
                log "signingKeyId = ${readProperty(signingKeyId)}"
                log "signingPassword = ${readProperty(signingPassword)}"
                log "signingSecretKeyRingFile = ${readProperty(signingSecretKeyRingFile)}"
            }
        }

        if (readBoolean(publishIsSkipCredential)) {
            log '跳过账号校验'
        } else {
            if (!containProperty(ossrhUsername)
                    || !containProperty(ossrhPassword)
            ) {
                logError 'ossrh的账号信息不可以为空'
                return false
            } else {
                log "ossrhUsername = ${readProperty(ossrhUsername)}"
                log "ossrhPassword = ${readProperty(ossrhPassword)}"
            }
        }

        return true
    }
}